#lang ivy1.7

include basic
include message

module slot_t = {
    individual valid: bool
    individual addr: addr_t
}

module node_t = {
    individual cache_state(A: addr_t): cache_state_t
    individual cache_data(A: addr_t): data_t
    instance txn_slots_fifo: fifo_t
    instance txn_slots(T: index_t): slot_t

    function cs_is_u(A: addr_t): bool
    definition cs_is_u(A: addr_t) = cache_state(A) = cs_ud | cache_state(A) = cs_uc
    
    function cs_is_c(A: addr_t): bool
    definition cs_is_c(A: addr_t) = cache_state(A) = cs_sc | cache_state(A) = cs_uc

    function cs_is_d(A: addr_t): bool
    definition cs_is_d(A: addr_t) = cache_state(A) = cs_ud

    function cs_is_i(A: addr_t): bool
    definition cs_is_i(A: addr_t) = cache_state(A) = cs_i

    instance req_channel: fifo_t
    instance data_channel: fifo_t
    instance resp_channel: fifo_t

    after init {
        txn_slots(S).valid := false;
        cache_state(A) := cs_i;
    }
}

instance nodes(N: nid_t): node_t

invariant nodes(hn_nid).cs_is_i(A)
invariant nodes(sn_nid).cs_is_i(A)

# action send_req_msg(src_id: nid_t, tgt_id: nid_t, txn_id: index_t, addr: addr_t, 
#                     opcode: req_msg_type_t, dbid: index_t, return_nid: nid_t,
#                     return_txn_id: index_t) = {
#     var idx: index_t := nodes(tgt_id).req_channel.send;
#     nodes(tgt_id).req_channel.map(idx).src_id := src_id;
#     nodes(tgt_id).req_channel.map(idx).tgt_id := tgt_id;
#     nodes(tgt_id).req_channel.map(idx).txn_id := txn_id;
#     nodes(tgt_id).req_channel.map(idx).addr := addr;
#     nodes(tgt_id).req_channel.map(idx).opcode := opcode;
#     nodes(tgt_id).req_channel.map(idx).dbid := dbid;
#     nodes(tgt_id).req_channel.map(idx).return_nid := return_nid;
#     nodes(tgt_id).req_channel.map(idx).return_txn_id := return_txn_id;
# }


# action send_data_msg(src_id: nid_t, tgt_id: nid_t, m: data_msg_t) = {
#     m.src_id := src_id;
#     m.tgt_id := tgt_id;
#     nodes(tgt_id).data_channel.send(m);
# }

# action send_resp_msg(src_id: nid_t, tgt_id: nid_t, m: resp_msg_t) = {
#     m.src_id := src_id;
#     m.tgt_id := tgt_id;
#     nodes(tgt_id).resp_channel.send(m);
# }
