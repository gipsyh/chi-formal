#lang ivy1.7

include basic
include message

module txn_slot_t = {
    individual valid: bool
    individual addr: addr_t

    after init {
        valid := false;
    }
}

module channel_t(slots) = {
    var head: index_t
    var tail: index_t
    individual map(I: index_t): index_t

    after init {
        head := 0;
        tail := 0;
    }

    action is_empty returns(res: bool) = {
        res := head = tail
    }

    action send returns(res: index_t) = {
        map(head) := slots.new;
        res := map(head);
        head := head + 1;
    }

    action recv returns (res: index_t) = {
        res := map(tail);
        tail := tail + 1;
    }

    invariant head >= tail
}

module node_t = {
    individual cache_state(A: addr_t): cache_state_t
    individual cache_data(A: addr_t): data_t
    instance txns(T: index_t): txn_slot_t
    instance txns_slots: slots_t

    function cs_is_u(A: addr_t): bool
    definition cs_is_u(A: addr_t) = cache_state(A) = cs_ud | cache_state(A) = cs_uc
    
    function cs_is_c(A: addr_t): bool
    definition cs_is_c(A: addr_t) = cache_state(A) = cs_sc | cache_state(A) = cs_uc

    function cs_is_d(A: addr_t): bool
    definition cs_is_d(A: addr_t) = cache_state(A) = cs_ud

    function cs_is_i(A: addr_t): bool
    definition cs_is_i(A: addr_t) = cache_state(A) = cs_i

    instance req_channel: channel_t(reqmsg_slots)
    instance data_channel: channel_t(dmsg_slots)
    instance resp_channel: channel_t(respmsg_slots)
    instance snp_channel: channel_t(snpmsg_slots)

    after init {
        cache_state(A) := cs_i;
    }
}

instance nodes(N: nid_t): node_t

invariant nodes(hn_nid).cs_is_i(A)
invariant nodes(sn_nid).cs_is_i(A)
