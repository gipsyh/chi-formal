#lang ivy1.7

include basic

type msg_type_t = { req_read_not_share_dirty_t,
                        req_read_no_snp_t,
                        req_read_unique_t,
                        data_todo_t,
                        snp_not_share_dirty_fwd_t
                    }

module msg_t = {
    individual in_use: bool
    individual list_next: midx_t

    individual src_id: nid_t
    individual tgt_id: nid_t
    individual txn_id: txn_idx_t
    individual addr: addr_t
    individual opcode: msg_type_t
    individual dbid: txn_idx_t
    individual return_nid: nid_t
    individual return_txn_id: txn_idx_t
    individual home_nid: nid_t
    individual data: data_t
    # TODO: replace to resp
    individual share: bool
    individual fwd_nid: nid_t
    individual ret_to_src: bool

    after init {
        in_use := false
    }

    action default = {
        list_next := midx_null;
    }
}

instance msg(I: midx_t): msg_t

action msg_new returns(msgr: midx_t) = {
    assume msgr ~= midx_null & ~msg(msgr).in_use;
    msg(msgr).default;
    msg(msgr).in_use := true;
}

action msg_free(f: midx_t) = {
    assert msg(f).in_use;
    msg(f).in_use := false;
}
