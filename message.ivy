#lang ivy1.7

include basic

type msg_type_t = { req_read_not_share_dirty_t,
                        req_read_no_snp_t,
                        req_read_unique_t,
                        data_todo_t,
                        snp_read_not_share_dirty_fwd_t
                    }

module msg_t = {
    individual src_id: nid_t
    individual tgt_id: nid_t
    individual txn_id: idx_t
    individual addr: addr_t
    individual opcode: msg_type_t
    individual dbid: idx_t
    individual return_nid: nid_t
    individual return_txn_id: idx_t
    individual home_nid: nid_t
    individual data: data_t
    # TODO: replace to resp
    individual share: bool
}

module slots_t(obj) = {
    relation in_use(I: idx_t)
    instance m(I: idx_t): obj 

    after init {
        in_use(I) := false
    }

    action new returns(r: idx_t) = {
        assume ~in_use(r);
        in_use(r) := true;
    }

    action free(f: idx_t) = {
        assert in_use(f);
        in_use(f) := false;
    }
}

instance msg: slots_t(msg_t)
